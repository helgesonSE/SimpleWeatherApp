using System.ComponentModel;

namespace Engine.WeatherClasses
{
    public class CurrentConditions : BaseNotificationClass
    {
        //Data from the API is loaded into these classes (generated by https://json2csharp.com/) from the deserialized json. Variables are thusly named.
        //There is a possibility of getting null values for some data, so the variables are prepared for this.
 
        private double? _winddir;
       
        public string? datetime { get; set; }
        public double? temp { get; set; }
        public double? precip { get; set; }
        public double? windspeed { get; set; }
        public string? conditions { get; set; }
        public double? winddir
        {
            get { return _winddir; }
            set
            {
                _winddir = value - 90;  //In order to orient the arrow correctly in the UI we need to adjust the value when it's set.
                OnPropertyChanged("windir");
            }
        }
    }

    public class WeatherReport : BaseNotificationClass 
    {
        //Root class, we need this for the API data to load properly. PropertyChanged code will be cleaned up here as well.
        private string _address;
        private CurrentConditions _currentConditions;
        public string ComboBoxDisplay { get; set; } //Extra variable for displaying search results in the combo box.
        public string address
        {
            get { return _address; }
            set
            {
                _address = value;
            }
        }
        public CurrentConditions currentConditions
        {
            get { return _currentConditions; }
            set
            {
                _currentConditions = value;
            }
        }

        public WeatherReport()
        {
            currentConditions = new CurrentConditions();
        }

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
